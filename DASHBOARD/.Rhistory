colour = "blue"),
axis.title.x = element_text(color="blue",size=20),
axis.title.y = element_text(color="blue",size=20),
legend.position ="top")+
annotate("text", x = -5, y = 45000, label = "These are 100k tweets, the same amount as March 26th")+
annotate("text", x = -7, y = 39000, label = "The distribution is the same")
ggplot(comparisonBeta, aes(x=score, fill=tweet)) +
geom_histogram(binwidth=1, alpha=.5, position="identity")+
ylab("Numer of Tweets")+
ggtitle("Distribution Sentiment: March 29 and 30th, Control Set")+ scale_x_continuous(breaks=-10:5)+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
theme(axis.text.x= element_text(color="blue",size=14),
axis.text.y= element_text(color="blue",size=14),
plot.title = element_text(size = 20,
colour = "blue"),
axis.title.x = element_text(color="blue",size=20),
axis.title.y = element_text(color="blue",size=20),
legend.position ="top")+
annotate("text", x = -5, y = 45000, label = "These are 100k tweets, the same amount as March 26th.")+
annotate("text", x = -7.5, y = 39000, label = "The distribution is the same.")
range(comparisonBeta$score)
range(comparisonAlpha$score)
plot2930<-ggplot(comparisonBeta, aes(x=score, fill=tweet)) +
geom_histogram(binwidth=1, alpha=.5, position="identity")+
ylab("Numer of Tweets")+
ggtitle("Distribution Sentiment: March 29 and 30th, Control Set")+ scale_x_continuous(breaks=-10:5)+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
theme(axis.text.x= element_text(color="blue",size=14),
axis.text.y= element_text(color="blue",size=14),
plot.title = element_text(size = 20,
colour = "blue"),
axis.title.x = element_text(color="blue",size=20),
axis.title.y = element_text(color="blue",size=20),
legend.position ="top")+
annotate("text", x = -5, y = 45000, label = "These are 100k tweets, the same amount as March 26th.")+
annotate("text", x = -7.5, y = 39000, label = "The distribution are the same.")
png(filename="plot2930.png",width = 1000,height = 1000)
plot2930
dev.off()
runApp()
runApp()
ggplot(comparisonBeta, aes(x=score, fill=tweet)) +
geom_histogram(binwidth=1, alpha=.5, position="identity")+
ylab("Numer of Tweets")+
ggtitle("Distribution Sentiment: March 29 and 30th, Control Set")+ scale_x_continuous(breaks=-10:5)+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
theme(axis.text.x= element_text(color="blue",size=14),
axis.text.y= element_text(color="blue",size=14),
plot.title = element_text(size = 20,
colour = "blue"),
axis.title.x = element_text(color="blue",size=20),
axis.title.y = element_text(color="blue",size=20),
legend.position ="top")+
annotate("text", x = -5, y = 45000, color="purple",
label = "The distribution are the same, regardless of the breaking news")
ggplot(comparisonBeta, aes(x=score, fill=tweet)) +
geom_histogram(binwidth=1, alpha=.5, position="identity")+
ylab("Numer of Tweets")+
ggtitle("Distribution Sentiment: March 29 and 30th, Control Set")+ scale_x_continuous(breaks=-10:5)+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
theme(axis.text.x= element_text(color="blue",size=14),
axis.text.y= element_text(color="blue",size=14),
plot.title = element_text(size = 20,
colour = "blue"),
axis.title.x = element_text(color="blue",size=20),
axis.title.y = element_text(color="blue",size=20),
legend.position ="top")+ylim(c(-9,5))
annotate("text", x = -8, y = 45000, color="purple",size=10,
label = "The distribution are the same, regardless of the breaking news")
ggplot(comparisonBeta, aes(x=score, fill=tweet)) +
geom_histogram(binwidth=1, alpha=.5, position="identity")+
ylab("Numer of Tweets")+
ggtitle("Distribution Sentiment: March 29 and 30th, Control Set")+ scale_x_continuous(breaks=-10:5)+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
theme(axis.text.x= element_text(color="blue",size=14),
axis.text.y= element_text(color="blue",size=14),
plot.title = element_text(size = 20,
colour = "blue"),
axis.title.x = element_text(color="blue",size=20),
axis.title.y = element_text(color="blue",size=20),
legend.position ="top")+ylim(c(-9,5))+
annotate("text", x = -8, y = 45000, color="purple",size=10,
label = "The distribution are the same, regardless of the breaking news")
ggplot(comparisonBeta, aes(x=score, fill=tweet)) +
geom_histogram(binwidth=1, alpha=.5, position="identity")+
ylab("Numer of Tweets")+
ggtitle("Distribution Sentiment: March 29 and 30th, Control Set")+ scale_x_continuous(breaks=-10:5)+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
theme(axis.text.x= element_text(color="blue",size=14),
axis.text.y= element_text(color="blue",size=14),
plot.title = element_text(size = 20,
colour = "blue"),
axis.title.x = element_text(color="blue",size=20),
axis.title.y = element_text(color="blue",size=20),
legend.position ="top")+xlim(c(-9,5))+
annotate("text", x = -8, y = 45000, color="purple",size=10,
label = "The distribution are the same, regardless of the breaking news")
ggplot(comparisonBeta, aes(x=score, fill=tweet)) +
geom_histogram(binwidth=1, alpha=.5, position="identity")+
ylab("Numer of Tweets")+
ggtitle("Distribution Sentiment: March 29 and 30th, Control Set")+ scale_x_continuous(breaks=-10:5)+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
theme(axis.text.x= element_text(color="blue",size=14),
axis.text.y= element_text(color="blue",size=14),
plot.title = element_text(size = 20,
colour = "blue"),
axis.title.x = element_text(color="blue",size=20),
axis.title.y = element_text(color="blue",size=20),
legend.position ="top")+
annotate("text", x = -8, y = 45000, color="purple",size=8,
label = "The distribution are the same, regardless of the breaking news")
ggplot(comparisonBeta, aes(x=score, fill=tweet)) +
geom_histogram(binwidth=1, alpha=.5, position="identity")+
ylab("Numer of Tweets")+
ggtitle("Distribution Sentiment: March 29 and 30th, Control Set")+ scale_x_continuous(breaks=-10:5)+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
theme(axis.text.x= element_text(color="blue",size=14),
axis.text.y= element_text(color="blue",size=14),
plot.title = element_text(size = 20,
colour = "blue"),
axis.title.x = element_text(color="blue",size=20),
axis.title.y = element_text(color="blue",size=20),
legend.position ="top")+
annotate("text", x = -7, y = 45000, color="purple",size=6,
label = "The distribution are the same, regardless of the breaking news")
plot2930<-ggplot(comparisonBeta, aes(x=score, fill=tweet)) +
geom_histogram(binwidth=1, alpha=.5, position="identity")+
ylab("Numer of Tweets")+
ggtitle("Distribution Sentiment: March 29 and 30th, Control Set")+ scale_x_continuous(breaks=-10:5)+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
theme(axis.text.x= element_text(color="blue",size=14),
axis.text.y= element_text(color="blue",size=14),
plot.title = element_text(size = 20,
colour = "blue"),
axis.title.x = element_text(color="blue",size=20),
axis.title.y = element_text(color="blue",size=20),
legend.position ="top")+
annotate("text", x = -7, y = 45000, color="purple",size=6,
label = "The distribution are the same, regardless of the breaking news.")
png(filename="plot2930.png",width = 1000,height = 1000)
plot2930
dev.off()
runApp()
plot2930<-ggplot(comparisonBeta, aes(x=score, fill=tweet)) +
geom_histogram(binwidth=1, alpha=.5, position="identity")+
ylab("Numer of Tweets")+
ggtitle("Distribution Sentiment: March 29 and 30th, Control Set")+ scale_x_continuous(breaks=-10:5)+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
theme(axis.text.x= element_text(color="blue",size=14),
axis.text.y= element_text(color="blue",size=14),
plot.title = element_text(size = 20,
colour = "blue"),
axis.title.x = element_text(color="blue",size=20),
axis.title.y = element_text(color="blue",size=20),
legend.position ="top")+
annotate("text", x = -6, y = 45000, color="purple",size=6,
label = "The distribution are the same, regardless of the breaking news.")
png(filename="plot2930.png",width = 1000,height = 1000)
plot2930
dev.off()
runApp()
runApp()
png(filename="histogram.png",width = 1000,height = 1000)
Histogram
dev.off()
runApp()
tweets.text <- sapply(resultSent, function(x) x$getText())
tweets.text <- sapply(resultSent$text, function(x) x$getText())
tweets.text <- resultSent$text
head(tweets.text)
#convert all text to lower case
tweets.text <- tolower(tweets.text)
# Replace blank space (“rt”)
tweets.text <- gsub("rt", "", tweets.text)
# Replace @UserName
tweets.text <- gsub("@\\w+", "", tweets.text)
# Remove punctuation
tweets.text <- gsub("[[:punct:]]", "", tweets.text)
# Remove links
tweets.text <- gsub("http\\w+", "", tweets.text)
# Remove tabs
tweets.text <- gsub("[ |\t]{2,}", "", tweets.text)
# Remove blank spaces at the beginning
tweets.text <- gsub("^ ", "", tweets.text)
# Remove blank spaces at the end
tweets.text <- gsub(" $", "", tweets.text)
require(tm)
#create corpus
tweets.text.corpus <- Corpus(VectorSource(tweets.text))
tweets.text.corpus <- tm_map(tweets.text.corpus, function(x)removeWords(x,stopwords()))
require(wordcloud)
#generate wordcloud
wordCloud<-wordcloud(tweets.text.corpus,min.freq = 2,
scale=c(7,0.5),colors=brewer.pal(8, "Dark2"),
random.color= TRUE, random.order = FALSE, max.words = 150)
wordCloud<-wordcloud(tweets.text.corpus,min.freq = 2,
scale=c(7,0.5),colors=brewer.pal(8, "Dark2"),
random.color= TRUE, random.order = FALSE, max.words = 100)
png(filename="wordCloud.png",width = 1000,height = 1000)
wordCloud
dev.off()
setwd("C:/Users/DON/Dropbox/DATAVIZ-PROJECT/DASHBOARD/app")
runApp()
runApp()
runApp()
wordCloud<-wordcloud(tweets.text.corpus,min.freq = 2,
scale=c(12,2),colors=brewer.pal(8, "Dark2"),
random.color= TRUE, random.order = FALSE, max.words = 50)
wordCloud<-wordcloud(tweets.text.corpus,min.freq = 2,
scale=c(10,1),colors=brewer.pal(8, "Dark2"),
random.color= TRUE, random.order = FALSE, max.words = 50)
wordCloud
runApp()
runApp()
runApp()
runApp()
dataset1<-read.csv(file = "C:/Users/DON/Dropbox/DATAVIZ-PROJECT/Data/dataset1.csv",header = TRUE,sep = ",")[,-1]
tweets.text2 <- dataset1$text
tweets.text2 <- tolower(tweets.text2)
tweets.text2 <- dataset1$text
#convert all text to lower case
tweets.text2 <- tolower(tweets.text2)
# Replace blank space (“rt”)
tweets.text2 <- gsub("rt", "", tweets.text2)
# Replace @UserName
tweets.text2 <- gsub("@\\w+", "", tweets.text2)
# Remove punctuation
tweets.text2 <- gsub("[[:punct:]]", "", tweets.text2)
# Remove links
tweets.text2 <- gsub("http\\w+", "", tweets.text2)
# Remove tabs
tweets.text2 <- gsub("[ |\t]{2,}", "", tweets.text2)
# Remove blank spaces at the beginning
tweets.text2 <- gsub("^ ", "", tweets.text2)
# Remove blank spaces at the end
tweets.text2 <- gsub(" $", "", tweets.text2)
#create corpus
tweets.text.corpus <- Corpus(VectorSource(tweets.text2))
#clean up by removing stop words
tweets.text.corpus <- tm_map(tweets.text.corpus, function(x)removeWords(x,stopwords()))
wordCloud2<-wordcloud(tweets.text.corpus,min.freq = 2,
scale=c(10,1),colors=brewer.pal(8, "Dark2"),
random.color= TRUE, random.order = FALSE, max.words = 50)
dataset1$created<-as.Date(dataset1$created)
FirstDay<-dataset1[(dataset1$created=="2015-03-26"),]
dim(FirstDay)
tweets.text2 <- FirstDay$text
#convert all text to lower case
tweets.text2 <- tolower(tweets.text2)
# Replace blank space (“rt”)
tweets.text2 <- gsub("rt", "", tweets.text2)
# Replace @UserName
tweets.text2 <- gsub("@\\w+", "", tweets.text2)
# Remove punctuation
tweets.text2 <- gsub("[[:punct:]]", "", tweets.text2)
# Remove links
tweets.text2 <- gsub("http\\w+", "", tweets.text2)
# Remove tabs
tweets.text2 <- gsub("[ |\t]{2,}", "", tweets.text2)
# Remove blank spaces at the beginning
tweets.text2 <- gsub("^ ", "", tweets.text2)
# Remove blank spaces at the end
tweets.text2 <- gsub(" $", "", tweets.text2)
#create corpus
tweets.text.corpus2 <- Corpus(VectorSource(tweets.text2))
#clean up by removing stop words
tweets.text.corpus2 <- tm_map(tweets.text.corpus2, function(x)removeWords(x,stopwords()))
#generate wordcloud
wordCloud2<-wordcloud(tweets.text.corpus2,min.freq = 2,
scale=c(10,1),colors=brewer.pal(8, "Dark2"),
random.color= TRUE, random.order = FALSE, max.words = 50)
FirstDay<-dataset1[(dataset1$created=="2015-03-24"),]
dim(FirstDay)
tweets.text2 <- FirstDay$text
#convert all text to lower case
tweets.text2 <- tolower(tweets.text2)
# Replace blank space (“rt”)
tweets.text2 <- gsub("rt", "", tweets.text2)
# Replace @UserName
tweets.text2 <- gsub("@\\w+", "", tweets.text2)
# Remove punctuation
tweets.text2 <- gsub("[[:punct:]]", "", tweets.text2)
# Remove links
tweets.text2 <- gsub("http\\w+", "", tweets.text2)
# Remove tabs
tweets.text2 <- gsub("[ |\t]{2,}", "", tweets.text2)
# Remove blank spaces at the beginning
tweets.text2 <- gsub("^ ", "", tweets.text2)
# Remove blank spaces at the end
tweets.text2 <- gsub(" $", "", tweets.text2)
#create corpus
tweets.text.corpus2 <- Corpus(VectorSource(tweets.text2))
#clean up by removing stop words
tweets.text.corpus2 <- tm_map(tweets.text.corpus2, function(x)removeWords(x,stopwords()))
#generate wordcloud
wordCloud2<-wordcloud(tweets.text.corpus2,min.freq = 2,
scale=c(10,1),colors=brewer.pal(8, "Dark2"),
random.color= TRUE, random.order = FALSE, max.words = 50)
tweets.text2 <- FirstDay$text
#convert all text to lower case
tweets.text2 <- tolower(tweets.text2)
# Replace blank space (“rt”)
tweets.text2 <- gsub("rt", "", tweets.text2)
# Replace @UserName
tweets.text2 <- gsub("@\\w+", "", tweets.text2)
# Remove punctuation
tweets.text2 <- gsub("[[:punct:]]", "", tweets.text2)
# Remove links
tweets.text2 <- gsub("http\\w+", "", tweets.text2)
# Remove tabs
tweets.text2 <- gsub("[ |\t]{2,}", "", tweets.text2)
# Remove blank spaces at the beginning
tweets.text2 <- gsub("^ ", "", tweets.text2)
# Remove blank spaces at the end
tweets.text2 <- gsub(" $", "", tweets.text2)
#create corpus
tweets.text.corpus2 <- Corpus(VectorSource(tweets.text2))
tweets.text.corpus2 <- tm_map(tweets.text.corpus2, removeWords, c(stopwords("spanish"),stopwords("en")))
#generate wordcloud
wordCloud2<-wordcloud(tweets.text.corpus2,min.freq = 2,
scale=c(10,1),colors=brewer.pal(8, "Dark2"),
random.color= TRUE, random.order = FALSE, max.words = 50)
runApp()
runApp()
runApp()
setwd("C:/Users/DON/Dropbox/DATAVIZ-PROJECT")
###Loading Dictionary Words###
positiveWords = scan("Dictionary/positive-words.txt",what="character", comment.char=";")
NegativeWords = scan("Dictionary/negative-words.txt", what="character", comment.char=";")
NegativeWords<-c(NegativeWords,"WTF")
require(plyr)
require(stringr)
require(dplyr)
require(ggplot2)
require(png)
require(grid)
require(tm)
require(wordcloud)
score.sentiment = function(sentences, pos.words, neg.words, .progress='none'){
# we got a vector of sentences. plyr will handle a list
# or a vector as an "l" for us
# we want a simple array of scores back, so we use
# "l" + "a" + "ply" = "laply":
scores = laply(sentences, function(sentence, pos.words, neg.words) {
# clean up sentences with R's regex-driven global substitute, gsub():
sentence = gsub('[[:punct:]]', '', sentence)
sentence = gsub('[[:cntrl:]]', '', sentence)
sentence = gsub('\\d+', '', sentence)
# and convert to lower case:
sentence = tolower(sentence)
# split into words. str_split is in the stringr package
word.list = str_split(sentence, '\\s+')
# sometimes a list() is one level of hierarchy too much
words = unlist(word.list)
# compare our words to the dictionaries of positive & negative terms
pos.matches = match(words, pos.words)
neg.matches = match(words, neg.words)
# match() returns the position of the matched term or NA
# we just want a TRUE/FALSE:
pos.matches = !is.na(pos.matches)
neg.matches = !is.na(neg.matches)
# and conveniently enough, TRUE/FALSE will be treated as 1/0 by sum():
score = sum(pos.matches) - sum(neg.matches)
return(score)
}, pos.words, neg.words, .progress=.progress )
scores.df = data.frame(score=scores, text=sentences)
return(scores.df)
}
resultSentFirstDay<-score.sentiment(FirstDay$text, positiveWords, NegativeWords)
colnames(resultSentFirstDay)
colnames(FirstDay)
resultSentFirstDay$Date<-as.Date(FirstDay$created)
resultSentFirstDay<-mutate(resultSentFirstDay, tweet=ifelse(resultSentFirstDay$score > 0, "Positive",
ifelse(resultSentFirstDay$score < 0, "Negative", "Neutral")))
by.tweetFirstDay <- group_by(resultSentFirstDay, tweet, Date)
by.tweetFirstDay <- summarise(by.tweetFirstDay, number=n())
by.tweetFirstDay
head(resultSentFirstDay)
View(resultSentFirstDay)
resultSentFirstWeek<-score.sentiment(dataset1$text, positiveWords, NegativeWords)
#Adding the date from the tweet
resultSentFirstWeek$Date<-as.Date(dataset1$created)
#Incluiding a qualitative variable for Positive, Negative and Neutral Tweets
resultSentFirstWeek<-mutate(resultSentFirstWeek, tweet=ifelse(resultSentFirstWeek$score > 0, "Positive",
ifelse(resultSentFirstWeek$score < 0, "Negative", "Neutral")))
#Grouping the tweets by days
by.tweetresultSentFirstWeek <- group_by(resultSentFirstWeek, tweet, Date)
by.tweetresultSentFirstWeek <- summarise(by.tweetresultSentFirstWeek, number=n())
by.tweetresultSentFirstWeek
plotweek<-as.data.frame(by.tweetresultSentFirstWeek)
colnames(plotweek)
plotweek[(plotweek$tweet=="Negative"),]
plotweek<-plotweek[(plotweek$tweet=="Negative"),]
as.Date(plotweek$Date,format = "%d-%m")
ggplot(plotweek, aes(Date, number)) + geom_line()
ggplot(plotweek, aes(Date, number)) + geom_line()+geom_point()
stat<-resultSentFirstWeek[(resultSentFirstWeek$score<0),]
ggplot(stat, aes(Date, score)) + geom_point(size=1) +
stat_summary(fun.data = 'mean_cl_normal', mult = 1, geom = 'smooth')
setwd("C:/Users/DON/Dropbox/DATAVIZ-PROJECT/DASHBOARD/app")
runApp()
runApp()
runApp()
require(ggmap)
require(mapproj)
require(rworldmap)
install.packages("rworldmap")
require(rworldmap)
require(dplyr)
install.packages("geosphere")
require(geosphere)
require(animation)
setwd("C:/Users/DON/Dropbox/DATAVIZ-PROJECT")
locationsPlot<-read.csv(file = "C:/Users/gaston/Dropbox/DATAVIZ-PROJECT/Data/locationsPlot.csv",header = TRUE,sep = ",")
locationsPlot<-read.csv(file = "C:/Users/DON/Dropbox/DATAVIZ-PROJECT/Data/locationsPlot.csv",header = TRUE,sep = ",")
colnames(locationsPlot)
locationsPlot<-read.csv(file = "C:/Users/DON/Dropbox/DATAVIZ-PROJECT/Data/locationsPlot.csv",header = TRUE,sep = ",")[,-1]
colnames(locationsPlot)
rotateMap <- function(angle){
worldmap2 <- ggplot() +
geom_polygon(data = world.df, aes(x = long, y = lat, group = group)) +
scale_y_continuous(breaks = (-2:2) * 30) +
scale_x_continuous(breaks = (-4:4) * 45) +
coord_map("ortho", orientation=c(20, angle, 0))+geom_point(data = locationsPlot,
aes(x = longitude, y = latitude), color = "red", size = 3,alpha=0.9)+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
theme(axis.text.x= element_text(color="blue",size=14),
axis.text.y= element_text(color="blue",size=14),
plot.title = element_text(size = 20,
colour = "blue"),
axis.title.x = element_text(color="blue",size=20),
axis.title.y = element_text(color="blue",size=20))+ylab("Latitude")+xlab("Longitude")+
ggtitle("Location: Top Active Users")
}
saveGIF({
ani.options(nmax = 360)
for(i in seq(0,360)){
print(rotateMap(i))
}
}, interval = 0.1 ,movie.name = "topusers.gif")
worldMap <- getMap()
world.points <- fortify(worldMap)
world.points$region <- world.points$id
world.df <- world.points[,c("long","lat","group", "region")]
worldmap <- ggplot() +
geom_polygon(data = world.df, aes(x = long, y = lat, group = group)) +
scale_y_continuous(breaks = (-2:2) * 30) +
scale_x_continuous(breaks = (-4:4) * 45)
rotateMap <- function(angle){
worldmap2 <- ggplot() +
geom_polygon(data = world.df, aes(x = long, y = lat, group = group)) +
scale_y_continuous(breaks = (-2:2) * 30) +
scale_x_continuous(breaks = (-4:4) * 45) +
coord_map("ortho", orientation=c(20, angle, 0))+geom_point(data = locationsPlot,
aes(x = longitude, y = latitude), color = "red", size = 3,alpha=0.9)+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
theme(axis.text.x= element_text(color="blue",size=14),
axis.text.y= element_text(color="blue",size=14),
plot.title = element_text(size = 20,
colour = "blue"),
axis.title.x = element_text(color="blue",size=20),
axis.title.y = element_text(color="blue",size=20))+ylab("Latitude")+xlab("Longitude")+
ggtitle("Location: Top Active Users")
}
saveGIF({
ani.options(nmax = 360)
for(i in seq(0,360)){
print(rotateMap(i))
}
}, interval = 0.1 ,movie.name = "topusers.gif")
setwd("C:/Users/DON/Dropbox/DATAVIZ-PROJECT")
getwd()
saveGIF({
ani.options(nmax = 360)
for(i in seq(0,360)){
print(rotateMap(i))
}
}, interval = 0.1 ,outdir=getwd(),"movie.name = "topusers.gif")
saveGIF({
ani.options(nmax = 360)
for(i in seq(0,360)){
print(rotateMap(i))
}
}, interval = 0.1 ,outdir=getwd(),movie.name = "topusers.gif")
setwd("C:/Users/DON/Dropbox/DATAVIZ-PROJECT")
saveGIF({
ani.options(nmax = 360)
for(i in seq(0,360)){
print(rotateMap(i))
}
}, interval = 0.1 ,outdir="C:/Users/DON/Dropbox/DATAVIZ-PROJECT",
movie.name = "topusers")
system("which convert", intern=TRUE)
system("which convert", intern=TRUE)
path.to.convert <- paste0(shortPathName(
"C:\Program Files\ImageMagick-6.9.0-Q16"), "convert.exe")
path.to.convert <- paste0(shortPathName("C:\Program Files\ImageMagick-6.9.0-Q16"),
"convert.exe")
path.to.convert <- paste0(shortPathName(
"C:\\Program Files\\ImageMagick-6.9.0-Q16\\"), "convert.exe")
saveGIF({
ani.options(nmax = 360,convert=path.to.convert)
for(i in seq(0,360)){
print(rotateMap(i))
}
}, interval = 0.1 ,outdir="C:/Users/DON/Dropbox/DATAVIZ-PROJECT",
movie.name = "topusers.gif")
setwd("C:/Users/DON/Dropbox/DATAVIZ-PROJECT/DASHBOARD/app")
runApp()
runApp()
runApp()
runApp()
